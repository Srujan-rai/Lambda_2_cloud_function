const { LAMBDA_PREFIX, PARAMS_MAP } = require('./common');

const LAMBDA_NAMES = {
    winningMomentsGenerator: 'winningMomentsGeneratorLambda',
    timestampsGenerator: 'timestampsGeneratorLambda',
    instantWin: 'instantWin',
    arbiter: 'arbiter',
    legacyAdditionalInformation: 'additionalConfigurationInformationLambda',
    codeBurner: 'codeBurnerLambda',
    codeValidator: 'codeValidatorLambda',
    fileUpload: 'requestUploadUrlLambda',
    ssFileUpload: 'requestPrivateUploadUrlLambda',
    pincodeToCurrency: 'pincodeToCurrencyLambda',
    saveUserData: 'saveUserDataLambda',
    sendEmail: 'emailSendLambda',
    emailTemplate: 'emailTemplateLambda',
    promotionMetadata: 'promotionMetadataProviderLambda',
    transaction: 'transactionLambda',
    prizeRedeem: 'prizeRedeemLambda',
    wallet: 'walletLambda',
    termsAndConditions: 'termsAndConditions',
    prize: 'prizeLambda',
    prizeQuery: 'prizeQueryLambda',
    prizeChecker: 'prizeCheckerLambda',
    configStore: 'configStoreLambda',
    promotionCreate: 'promotionCreateLambda',
    analysis: 'analysisLambda',
    currencies: 'currenciesProviderLambda',
    emailTemplates: 'emailTemplatesProviderLambda',
    configurationMetadata: 'configurationProviderLambda',
    dataExporter: 'dataExporterLambda',
    prizeDrawExporter: 'prizeDrawExporterLambda',
    cloudWatchQueryRunner: 'cloudWatchQueryRunnerLambda',
    currencyReducer: 'currencyReducerLambda',
    currencyCodes: 'currencyCodesLambda',
    currencyAllocationRulesUtilities: 'currencyAllocationRulesUtilitiesLambda',
    addGdprRequest: 'addGdprRequestLambda',
    digitalCodesRemover: 'digitalCodesRemoverLambda',
    digitalCodesQuery: 'digitalCodesQueryLambda',
    digitalCodesQueryByUser: 'digitalCodesQueryByUserLambda',
    digitalCodesRedeem: 'digitalCodesRedeemLambda',
    acceptReservedVoucher: 'acceptReservedVoucherLambda',
    consumerBlocking: 'consumerBlockingLambda',
    rejectWinningMoment: 'rejectWinningMomentLambda',
    rejectReservedVoucher: 'rejectReservedVoucherLambda',
    prizeCounterChecker: 'prizeCounterCheckerLambda',
    autoRedeemPrize: 'autoRedeemPrizeLambda',
    databaseOperationsHandler: 'databaseOperationsHandlerLambda',
    currencyExpiryEvaluation: 'currencyExpiryEvaluation',
    currencyExpirator: 'currencyExpirator',
    listTransactionsByUser: 'listTransactionsByUserLambda',
    queryExpirationWallet: 'queryExpirationWalletLambda',
    winningMomentsUpload: 'winningMomentsUploadLamdba',
    promoEntry: 'promoEntryLambda',
    pincodeHistory: 'pincodeHistoryLambda',
    lotteryExporter: 'lotteryExporterLambda',
    editPrizeImageUpload: 'editPrizeImageUploadLambda',
    digitalCodesBulkUpload: 'digitalCodesBulkUploadLambda',
    digitalCodesBulkUploadDaily: 'digitalCodesBulkUploadDailyLambda',
    downloadReplication: 'downloadReplicationLambda',
    winningMomentsExpirator: 'winningMomentsExpiratorLambda',
    winningMomentsExpiryEvaluater: 'winningMomentsExpiryEvaluater',
    configurationMetadataExporter: 'configurationMetadataExporterLambda',
    exportParticipationsLambda: 'exportParticipationsLambda',
    genericDynamoDbWriter: 'genericDynamoDbWriter',
    instantWinCostEntry: 'instantWinCostEntry',
    promotionsArchiver: 'promotionsArchiver',
    sendMessage: 'sendMessage',
    notificationProcessor: 'notificationProcessor',
    prizeRecordProcessor: 'prizeRecordProcessor',
    circuitBreaker: 'circuitBreaker',
};

const FUNCTION_NAMES = {
    winningMomentsGeneratorLambda: LAMBDA_PREFIX + LAMBDA_NAMES.winningMomentsGenerator,
    timestampsGeneratorLambda: LAMBDA_PREFIX + LAMBDA_NAMES.timestampsGenerator,
    instantWinLambda: LAMBDA_PREFIX + LAMBDA_NAMES.instantWin,
    arbiterLambda: LAMBDA_PREFIX + LAMBDA_NAMES.arbiter,
    codeBurner: LAMBDA_PREFIX + LAMBDA_NAMES.codeBurner,
    codeValidator: LAMBDA_PREFIX + LAMBDA_NAMES.codeValidator,
    fileUpload: LAMBDA_PREFIX + LAMBDA_NAMES.fileUpload,
    ssFileUpload: LAMBDA_PREFIX + LAMBDA_NAMES.ssFileUpload,
    pincodeToCurrency: LAMBDA_PREFIX + LAMBDA_NAMES.pincodeToCurrency,
    saveUserData: LAMBDA_PREFIX + LAMBDA_NAMES.saveUserData,
    sendEmail: LAMBDA_PREFIX + LAMBDA_NAMES.sendEmail,
    emailTemplateLambda: LAMBDA_PREFIX + LAMBDA_NAMES.emailTemplate,
    promotionMetadata: LAMBDA_PREFIX + LAMBDA_NAMES.promotionMetadata,
    transactionLambda: LAMBDA_PREFIX + LAMBDA_NAMES.transaction,
    prizeRedeemLambda: LAMBDA_PREFIX + LAMBDA_NAMES.prizeRedeem,
    walletLambda: LAMBDA_PREFIX + LAMBDA_NAMES.wallet,
    termsAndConditions: LAMBDA_PREFIX + LAMBDA_NAMES.termsAndConditions,
    prizeLambda: LAMBDA_PREFIX + LAMBDA_NAMES.prize,
    prizeQueryLambda: LAMBDA_PREFIX + LAMBDA_NAMES.prizeQuery,
    prizeCheckerLambda: LAMBDA_PREFIX + LAMBDA_NAMES.prizeChecker,
    configStoreLambda: LAMBDA_PREFIX + LAMBDA_NAMES.configStore,
    promotionCreateLambda: LAMBDA_PREFIX + LAMBDA_NAMES.promotionCreate,
    analysisLambda: LAMBDA_PREFIX + LAMBDA_NAMES.analysis,
    currenciesLambda: LAMBDA_PREFIX + LAMBDA_NAMES.currencies,
    emailTemplatesLambda: LAMBDA_PREFIX + LAMBDA_NAMES.emailTemplates,
    configurationMetadata: LAMBDA_PREFIX + LAMBDA_NAMES.configurationMetadata,
    dataExporterLambda: LAMBDA_PREFIX + LAMBDA_NAMES.dataExporter,
    prizeDrawExporterLambda: LAMBDA_PREFIX + LAMBDA_NAMES.prizeDrawExporter,
    cloudWatchQueryRunnerLambda: LAMBDA_PREFIX + LAMBDA_NAMES.cloudWatchQueryRunner,
    currencyReducer: LAMBDA_PREFIX + LAMBDA_NAMES.currencyReducer,
    currencyCodesLambda: LAMBDA_PREFIX + LAMBDA_NAMES.currencyCodes,
    currencyAllocationRulesUtilitiesLambda: LAMBDA_PREFIX + LAMBDA_NAMES.currencyAllocationRulesUtilities,
    addGdprRequestLambda: LAMBDA_PREFIX + LAMBDA_NAMES.addGdprRequest,
    digitalCodesRemoverLambda: LAMBDA_PREFIX + LAMBDA_NAMES.digitalCodesRemover,
    digitalCodesQueryLambda: LAMBDA_PREFIX + LAMBDA_NAMES.digitalCodesQuery,
    digitalCodesQueryByUserLambda: LAMBDA_PREFIX + LAMBDA_NAMES.digitalCodesQueryByUser,
    digitalCodesRedeemLambda: LAMBDA_PREFIX + LAMBDA_NAMES.digitalCodesRedeem,
    acceptReservedVoucherLambda: LAMBDA_PREFIX + LAMBDA_NAMES.acceptReservedVoucher,
    consumerBlockingLambda: LAMBDA_PREFIX + LAMBDA_NAMES.consumerBlocking,
    rejectWinningMomentLambda: LAMBDA_PREFIX + LAMBDA_NAMES.rejectWinningMoment,
    rejectReservedVoucherLambda: LAMBDA_PREFIX + LAMBDA_NAMES.rejectReservedVoucher,
    prizeCounterCheckerLambda: LAMBDA_PREFIX + LAMBDA_NAMES.prizeCounterChecker,
    autoRedeemPrizeLambda: LAMBDA_PREFIX + LAMBDA_NAMES.autoRedeemPrize,
    databaseOperationsHandlerLambda: LAMBDA_PREFIX + LAMBDA_NAMES.databaseOperationsHandler,
    currencyExpiryEvaluation: LAMBDA_PREFIX + LAMBDA_NAMES.currencyExpiryEvaluation,
    currencyExpirator: LAMBDA_PREFIX + LAMBDA_NAMES.currencyExpirator,
    listTransactionsByUserLambda: LAMBDA_PREFIX + LAMBDA_NAMES.listTransactionsByUser,
    queryExpirationWalletLambda: LAMBDA_PREFIX + LAMBDA_NAMES.queryExpirationWallet,
    winningMomentsUploadLamdba: LAMBDA_PREFIX + LAMBDA_NAMES.winningMomentsUpload,
    promoEntryLambda: LAMBDA_PREFIX + LAMBDA_NAMES.promoEntry,
    pincodeHistoryLambda: LAMBDA_PREFIX + LAMBDA_NAMES.pincodeHistory,
    lotteryExporterLambda: LAMBDA_PREFIX + LAMBDA_NAMES.lotteryExporter,
    editPrizeImageUploadLambda: LAMBDA_PREFIX + LAMBDA_NAMES.editPrizeImageUpload,
    digitalCodesBulkUploadLambda: LAMBDA_PREFIX + LAMBDA_NAMES.digitalCodesBulkUpload,
    digitalCodesBulkUploadDailyLambda: LAMBDA_PREFIX + LAMBDA_NAMES.digitalCodesBulkUploadDaily,
    configurationMetadataExporterLambda: LAMBDA_PREFIX + LAMBDA_PREFIX.configurationMetadataExporter,
    downloadReplicationLambda: LAMBDA_PREFIX + LAMBDA_NAMES.downloadReplication,
    winningMomentsExpiratorLambda: LAMBDA_PREFIX + LAMBDA_NAMES.winningMomentsExpirator,
    winningMomentsExpiryEvaluater: LAMBDA_PREFIX + LAMBDA_NAMES.winningMomentsExpiryEvaluater,
    exportParticipationsLambda: LAMBDA_PREFIX + LAMBDA_NAMES.exportParticipationsLambda,
    genericDynamoDbWriter: LAMBDA_PREFIX + LAMBDA_NAMES.genericDynamoDbWriter,
    instantWinCostEntry: LAMBDA_PREFIX + LAMBDA_NAMES.instantWinCostEntry,
    promotionsArchiver: LAMBDA_PREFIX + LAMBDA_NAMES.promotionsArchiver,
    sendMessage: LAMBDA_PREFIX + LAMBDA_NAMES.sendMessage,
    notificationProcessor: LAMBDA_PREFIX + LAMBDA_NAMES.notificationProcessor,
    prizeRecordProcessor: LAMBDA_PREFIX + LAMBDA_NAMES.prizeRecordProcessor,
    circuitBreaker: LAMBDA_PREFIX + LAMBDA_NAMES.circuitBreaker,
};

/**
 * Required parameters for each lambda (excluding configurationId and flowLabel). This map is used by validInputCheckerLambda.js
 * in order to determine if all required parameters are passed.
 */
const REQUIRED_PARAMETERS_FOR_LAMBDA = {
    fileUpload: [PARAMS_MAP.FILE_NAME],
    ssFileUpload: [PARAMS_MAP.FILE_NAME],
    saveUserData: [
        PARAMS_MAP.USER_ID,
        PARAMS_MAP.USER_FULL_NAME,
        PARAMS_MAP.USER_PHONE_NUMBER,
        PARAMS_MAP.DATE_OF_BIRTH,
        PARAMS_MAP.USERS_MARKETING_PREFERENCE,
    ],
    burnPincodes: [PARAMS_MAP.PINS, PARAMS_MAP.USER_ID],
    validatePincodes: [PARAMS_MAP.PINS],
    walletLambda: [PARAMS_MAP.USER_ID],
    transactionLambda: [PARAMS_MAP.USER_ID],
    prizeRedeemLambda: [PARAMS_MAP.PRIZE_ID, PARAMS_MAP.USER_ID],
    prizeLambda: [PARAMS_MAP.PRIZE_ID],
    winningMomentsGeneratorLambda: [
        PARAMS_MAP.CONFIGURATION_ID,
        PARAMS_MAP.START_DATE,
        PARAMS_MAP.END_DATE,
        PARAMS_MAP.TIMESTAMP_DISTRIBUTION_DEFECT,
        PARAMS_MAP.PRIZE_DISTRIBUTION_DEFECT,
    ],
    timestampsGeneratorLambda: [
        PARAMS_MAP.START_DATE,
        PARAMS_MAP.END_DATE,
        PARAMS_MAP.TIMESTAMP_DISTRIBUTION_DEFECT,
        PARAMS_MAP.TIMESTAMPS_AMOUNT,
    ],
    instantWin: [PARAMS_MAP.USER_ID],
    instantWinCostEntry: [PARAMS_MAP.CONFIGURATION_ID],
    rejectWinningMomentLambda: [PARAMS_MAP.PARTICIPATION_ID],
    rejectReservedVoucherLambda: [PARAMS_MAP.PARTICIPATION_ID],
    sendEmail: [PARAMS_MAP.CONFIGURATION_ID, PARAMS_MAP.EMAIL_DESTINATION],
    configStoreLambda: [PARAMS_MAP.PROMOTION_ID, PARAMS_MAP.CONFIGURATION],
    digitalCodesBulkUploadLambda: [PARAMS_MAP.CONFIGURATION, PARAMS_MAP.PRIZE_ID],
    digitalCodesBulkUploadDailyLambda: [PARAMS_MAP.CONFIGURATION, PARAMS_MAP.PRIZE_ID],
    analysisLambda: [PARAMS_MAP.FLOW_LABEL, PARAMS_MAP.ANALYSIS_LAMBDA_FLOW_PARAMS],
    currencyReducer: [PARAMS_MAP.USER_ID],
    addGdprRequestLambda: [PARAMS_MAP.USER_ID, PARAMS_MAP.REQUEST_TYPE, PARAMS_MAP.JIRA_NUMBER, PARAMS_MAP.REQUESTER_USER_ID],
    digitalCodesRemoverLambda: [PARAMS_MAP.CONFIGURATION_ID, PARAMS_MAP.PRIZE_ID, PARAMS_MAP.AMOUNT],
    digitalCodesQueryLambda: [PARAMS_MAP.VOUCHER],
    digitalCodesQueryByUserLambda: [PARAMS_MAP.USER_ID],
    digitalCodesQueryByUserLambdaV2: [PARAMS_MAP.USER_ID],
    digitalCodesRedeemLambda: [
        PARAMS_MAP.PRIZE_ID,
        PARAMS_MAP.VOUCHER,
        PARAMS_MAP.OUTLET_ID,
        PARAMS_MAP.OUTLET_NAME,
        PARAMS_MAP.REDEMPTION_APP_USER,
    ],
    acceptReservedVoucherLambda: [PARAMS_MAP.PARTICIPATION_IDS],
    currencyAllocationRulesUtilitiesLambda: [PARAMS_MAP.CONFIGURATION_ID, PARAMS_MAP.RULE_ID],
    consumerBlockingLambda: [PARAMS_MAP.BLOCKING_USER_PARAM],
    autoRedeemPrizeLambda: [PARAMS_MAP.CONFIGURATION_ID, PARAMS_MAP.USER_ID],
    databaseOperationsHandler: [PARAMS_MAP.DB_OPERATION_PARAMS],
    listTransactionsByUserLambda: [PARAMS_MAP.USER_ID],
    queryExpirationWalletLambda: [PARAMS_MAP.USER_ID],
    promoEntryLambda: [PARAMS_MAP.USER_ID],
    promoEntryLambdaWithImageEntry: [PARAMS_MAP.PARTICIPATION_IMAGE],
    pincodeHistoryLambda: [PARAMS_MAP.USER_ID, PARAMS_MAP.CONFIGURATION_ID],
    lotteryExporterLambda: [PARAMS_MAP.CONFIGURATION_ID, PARAMS_MAP.PRIZE_ID, PARAMS_MAP.NUMBER_OF_WINNERS],
    prizeQueryLambda: [PARAMS_MAP.CONFIGURATION_ID, PARAMS_MAP.USER_ID],
    sendMessage: [PARAMS_MAP.MESSAGE_BODY, PARAMS_MAP.QUEUE_URL],
};

const CONFIGURATION_FUNCTIONS_MAP = {
    burnPincodes: {
        FunctionName: FUNCTION_NAMES.codeBurner,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    validatePincodes: {
        FunctionName: FUNCTION_NAMES.codeValidator,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    instantWin: {
        FunctionName: FUNCTION_NAMES.instantWinLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    saveUserData: {
        FunctionName: FUNCTION_NAMES.saveUserData,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    fileUpload: {
        FunctionName: FUNCTION_NAMES.fileUpload,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    ssFileUpload: {
        FunctionName: FUNCTION_NAMES.ssFileUpload,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    promotionMetadata: {
        FunctionName: FUNCTION_NAMES.promotionMetadata,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    transactionLambda: {
        FunctionName: FUNCTION_NAMES.transactionLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    prizeRedeemLambda: {
        FunctionName: FUNCTION_NAMES.prizeRedeemLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    prizeQueryLambda: {
        FunctionName: FUNCTION_NAMES.prizeQueryLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    pincodeToCurrency: {
        FunctionName: FUNCTION_NAMES.pincodeToCurrency,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    walletLambda: {
        FunctionName: FUNCTION_NAMES.walletLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    prizeLambda: {
        FunctionName: FUNCTION_NAMES.prizeLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    configStoreLambda: {
        FunctionName: FUNCTION_NAMES.configStoreLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    promotionCreateLambda: {
        FunctionName: FUNCTION_NAMES.promotionCreateLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    currenciesLambda: {
        FunctionName: FUNCTION_NAMES.currenciesLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    emailTemplatesLambda: {
        FunctionName: FUNCTION_NAMES.emailTemplatesLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    configurationMetadata: {
        FunctionName: FUNCTION_NAMES.configurationMetadata,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    analysisLambda: {
        FunctionName: FUNCTION_NAMES.analysisLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    dataExporterLambda: {
        FunctionName: FUNCTION_NAMES.dataExporterLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    prizeDrawExporterLambda: {
        FunctionName: FUNCTION_NAMES.prizeDrawExporterLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    cloudWatchQueryRunnerLambda: {
        FunctionName: FUNCTION_NAMES.cloudWatchQueryRunnerLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    currencyReducer: {
        FunctionName: FUNCTION_NAMES.currencyReducer,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    currencyCodesLambda: {
        FunctionName: FUNCTION_NAMES.currencyCodesLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    emailTemplateLambda: {
        FunctionName: FUNCTION_NAMES.emailTemplateLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    emailSendLambda: {
        FunctionName: FUNCTION_NAMES.sendEmail,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    currencyAllocationRulesUtilitiesLambda: {
        FunctionName: FUNCTION_NAMES.currencyAllocationRulesUtilitiesLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    winningMomentsGenerator: {
        FunctionName: FUNCTION_NAMES.winningMomentsGeneratorLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    timestampsGeneratorLambda: {
        FunctionName: FUNCTION_NAMES.timestampsGeneratorLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    addGdprRequestLambda: {
        FunctionName: FUNCTION_NAMES.addGdprRequestLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    digitalCodesRemoverLambda: {
        FunctionName: FUNCTION_NAMES.digitalCodesRemoverLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    digitalCodesQueryLambda: {
        FunctionName: FUNCTION_NAMES.digitalCodesQueryLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    digitalCodesQueryByUserLambda: {
        FunctionName: FUNCTION_NAMES.digitalCodesQueryByUserLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    digitalCodesRedeemLambda: {
        FunctionName: FUNCTION_NAMES.digitalCodesRedeemLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    acceptReservedVoucherLambda: {
        FunctionName: FUNCTION_NAMES.acceptReservedVoucherLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    rejectWinningMomentLambda: {
        FunctionName: FUNCTION_NAMES.rejectWinningMomentLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    rejectReservedVoucherLambda: {
        FunctionName: FUNCTION_NAMES.rejectReservedVoucherLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    consumerBlockingLambda: {
        FunctionName: FUNCTION_NAMES.consumerBlockingLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    prizeCounterCheckerLambda: {
        FunctionName: FUNCTION_NAMES.prizeCounterCheckerLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    autoRedeemPrizeLambda: {
        FunctionName: FUNCTION_NAMES.autoRedeemPrizeLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    databaseOperationsHandlerLambda: {
        FunctionName: FUNCTION_NAMES.databaseOperationsHandlerLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    listTransactionsByUserLambda: {
        FunctionName: FUNCTION_NAMES.listTransactionsByUserLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    queryExpirationWalletLambda: {
        FunctionName: FUNCTION_NAMES.queryExpirationWalletLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    winningMomentsUploadLamdba: {
        FunctionName: FUNCTION_NAMES.winningMomentsUploadLamdba,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    promoEntryLambda: {
        FunctionName: FUNCTION_NAMES.promoEntryLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    pincodeHistoryLambda: {
        FunctionName: FUNCTION_NAMES.pincodeHistoryLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    prizeCheckerLambda: {
        FunctionName: FUNCTION_NAMES.prizeCheckerLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    lotteryExporterLambda: {
        FunctionName: FUNCTION_NAMES.lotteryExporterLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    editPrizeImageUploadLambda: {
        FunctionName: FUNCTION_NAMES.editPrizeImageUploadLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    digitalCodesBulkUploadLambda: {
        FunctionName: FUNCTION_NAMES.digitalCodesBulkUploadLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    digitalCodesBulkUploadDailyLambda: {
        FunctionName: FUNCTION_NAMES.digitalCodesBulkUploadDailyLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    downloadReplicationLambda: {
        FunctionName: FUNCTION_NAMES.downloadReplicationLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    winningMomentsExpiratorLambda: {
        FunctionName: FUNCTION_NAMES.winningMomentsExpiratorLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    exportParticipationsLambda: {
        FunctionName: FUNCTION_NAMES.exportParticipationsLambda,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    instantWinCostEntry: {
        FunctionName: FUNCTION_NAMES.instantWinCostEntry,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    sendMessage: {
        FunctionName: FUNCTION_NAMES.sendMessage,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    notificationProcessor: {
        FunctionName: FUNCTION_NAMES.notificationProcessor,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    prizeRecordProcessor: {
        FunctionName: FUNCTION_NAMES.prizeRecordProcessor,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
    circuitBreaker: {
        FunctionName: FUNCTION_NAMES.circuitBreaker,
        InvocationType: 'RequestResponse',
        LogType: 'Tail',
    },
};

const QUERY_LAMBDAS = [
    LAMBDA_NAMES.wallet,
    LAMBDA_NAMES.digitalCodesQuery,
    LAMBDA_NAMES.digitalCodesQueryByUser,
    LAMBDA_NAMES.legacyAdditionalInformation,
    LAMBDA_NAMES.prizeQuery,
    LAMBDA_NAMES.listTransactionsByUser,
];

module.exports = {
    CONFIGURATION_FUNCTIONS_MAP,
    LAMBDA_NAMES,
    REQUIRED_PARAMETERS_FOR_LAMBDA,
    QUERY_LAMBDAS,
};
